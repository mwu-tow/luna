# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master


jobs:
- job: Ubuntu Optimized
  timeoutInMinutes: 0
  pool:
    vmImage: 'Ubuntu-16.04'
  container:
    image: lunalang/luna-ci
    options: --cap-add SYS_ADMIN --cap-add MKNOD --device=/dev/fuse --security-opt apparmor:unconfined
  steps:
  - script: stack build --ghc-options="-fno-omit-interface-pragmas -pgmc gcc-8" --test --copy-bins
  - script: LD_PRELOAD=~/.stack/programs/x86_64-linux/ghc-8.4.4/lib/ghc-8.4.4/rts/libffi.so.7 $(Build.SourcesDirectory)/dist/bin/public/luna run --target=$(Build.SourcesDirectory)/stdlib/StdTest
- job: Ubuntu Default
  timeoutInMinutes: 0
  pool:
    vmImage: 'Ubuntu-16.04'
  container:
    image: lunalang/luna-ci
    options: --cap-add SYS_ADMIN --cap-add MKNOD --device=/dev/fuse --security-opt apparmor:unconfined
  steps:
  - script: stack build --ghc-options="-pgmc gcc-8" --test --copy-bins
  - script: LD_PRELOAD=~/.stack/programs/x86_64-linux/ghc-8.4.4/lib/ghc-8.4.4/rts/libffi.so.7 $(Build.SourcesDirectory)/dist/bin/public/luna run --target=$(Build.SourcesDirectory)/stdlib/StdTest
- job: macOS
  timeoutInMinutes: 0
  pool:
    vmImage: 'macOS-10.13'
  steps:
  - script: >
      curl -sSL https://get.haskellstack.org/ | sh
      && brew update
      && brew install pkg-config libffi zmq
      && eval $(brew shellenv)
      && export LDFLAGS="-L/usr/local/opt/libffi/lib"
      && export PKG_CONFIG_PATH="/usr/local/opt/libffi/lib/pkgconfig"
      && stack build
  - script: stack run -- run --target=$(Build.SourcesDirectory)/stdlib/StdTest